// 数组的类型
// 在 TypeScript 中，数组类型有多种定义方式，比较灵活。
// =======================================================
// =======================================================
// 「类型 + 方括号」表示法
// 最简单的方法是使用「类型 + 方括号」来表示数组：
var arr = [1, 1, 2, 3, 5];
// 数组的项中不允许出现其他的类型：
// 下面的示例中，[1, '1', 2, 3, 5] 的类型被推断为 (number | string)[]，这是联合类型和数组的结合。
var arr2 = [1, '1', 2, 3, 5];
// 数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：
// 下面的示例中，push 方法只允许传入 number 类型的参数，但是却传了一个 string 类型的参数，所以报错了。
arr2.push('2');
// =======================================================
// =======================================================
// 数组泛型
// 也可以使用数组泛型（Array Generic） Array<elemType> 来表示数组：
var arr3 = [1, 1, 2, 3, 5];
var arr4 = [1, 2, 3, 4, 5];
// =======================================================
// =======================================================
// any 在数组中的应用
// 一个比较常见的做法是，用 any 表示数组中允许出现任意类型：
var arr5 = ['letter', 25, { url: 'http://www.baidu.com/' }];
// =======================================================
// =======================================================
// 类数组
// 类数组（Array-like Object）不是数组类型，比如 arguments：
function arrayLikFun() {
    var args = arguments;
}
// 事实上常见的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等：
function arrayLikFun2() {
    var args = arguments;
}
